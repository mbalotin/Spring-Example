<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com</groupId>
  <artifactId>spring_example</artifactId>
  <name>Spring Example</name>
  <description>Spring Example for every project!</description>
  <version>1.0</version>
  <packaging>war</packaging>

  <!-- Inherit defaults from Spring Boot -->
  <parent>
    <groupId>io.spring.platform</groupId>
    <artifactId>platform-bom</artifactId>
    <version>2.0.0.BUILD-SNAPSHOT</version>
    <relativePath />
  </parent>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.resources.sourceEncoding>UTF-8</project.resources.sourceEncoding>
    <!-- This is used by spring boot to set java version and Main class (for jar).-->
    <java.version>1.8</java.version>
    <start-class>com.Application</start-class>
    <!-- Manually updating Spring Security because parent POM still hasn't and I want the latest version as it has some good bug fixes.-->
    <!-- https://jira.spring.io/browse/SEC-2758-->
    <spring-security.version>4.0.0.RELEASE</spring-security.version>
  </properties>

  <dependencies>

    <!-- To build a war file that is both executable and deployable into an external container
    you need to mark the embedded container dependencies as “provided”, e.g:-->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-tomcat</artifactId>
      <scope>provided</scope>
    </dependency>

    <!-- Spring Boot Starter Core dependencies -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter</artifactId>
      <exclusions>
        <!-- Exclude default loggin in favor of log4j -->
        <exclusion>
          <groupId>org.springframework.boot</groupId>
          <artifactId>spring-boot-starter-logging</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

    <!-- Spring Boot Test dependencies http://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-testing.html -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
    </dependency>

    <!-- Spring MCV dependencies -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>

    <!-- Spring Metrics dependencies -->
    <!-- http://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#production-ready-->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-actuator</artifactId>
    </dependency>

    <!-- Spring Security dependencies -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-security</artifactId>
    </dependency>

    <!-- Log4j dependencies -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-log4j</artifactId>
    </dependency>

    <!-- Thymeleaf dependencies -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-thymeleaf</artifactId>
    </dependency>
    <dependency>
      <groupId>org.thymeleaf.extras</groupId>
      <artifactId>thymeleaf-extras-springsecurity4</artifactId>
      <version>2.1.2.RELEASE</version>
    </dependency>

    <!-- Mail dependencies -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-mail</artifactId>
    </dependency>

    <!-- WebJars dependencies -->
    <!-- Want AngularJS? https://github.com/dsyer/spring-security-angular-->
    <dependency>
      <groupId>org.webjars</groupId>
      <artifactId>bootstrap</artifactId>
      <version>3.3.4</version>
    </dependency>
    <dependency>
      <groupId>org.webjars</groupId>
      <artifactId>jquery</artifactId>
      <version>2.1.3</version>
    </dependency>

    <!-- Commons dependencies  -->
    <dependency>
      <groupId>commons-validator</groupId>
      <artifactId>commons-validator</artifactId>
      <version>1.4.1</version>
    </dependency>
    <dependency>
      <groupId>commons-io</groupId>
      <artifactId>commons-io</artifactId>
    </dependency>

    <!-- Ehcache dependencies -->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-context-support</artifactId>
    </dependency>
    <dependency>
      <groupId>net.sf.ehcache</groupId>
      <artifactId>ehcache</artifactId>
    </dependency>

    <!-- Markdown to Html dependencies -->
    <dependency>
      <groupId>org.commonjava.googlecode.markdown4j</groupId>
      <artifactId>markdown4j</artifactId>
      <version>2.2-cj-1.0</version>
    </dependency>

    <!-- Lombok dependencies -->
    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
    </dependency>

    <!-- Database dependencies -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>
    <dependency>
      <groupId>mysql</groupId>
      <artifactId>mysql-connector-java</artifactId>
    </dependency>

  </dependencies>

  <build>

    <!-- Add Resources -->
    <resources>
      <!-- Basic Resources-->
      <resource>
        <directory>${basedir}/src/main/resources</directory>
        <filtering>true</filtering>
      </resource>

      <!-- WebApp Resources-->
      <resource>
        <directory>${basedir}/src/main/webapp</directory>
        <filtering>false</filtering>
        <excludes>
          <!-- Remove this exclude to package as .JAR -->
          <exclude>webpages/</exclude>
          <!-- These file are excluded because they are compiled and minified by other plugins -->
          <exclude>**/*.coffee</exclude>
          <exclude>**/*.scss</exclude>
        </excludes>
      </resource>

      <!-- Keystore.jks and external application.properties Resources -->
      <resource>
        <directory>${basedir}</directory>
        <targetPath>${project.build.directory}</targetPath>
        <filtering>false</filtering>
        <includes>
          <include>keystore.jks</include>
          <include>application.properties</include>
        </includes>
      </resource>

      <!-- Markdown Resources -->
      <resource>
        <directory>${basedir}</directory>
        <targetPath>${project.build.outputDirectory}/markdown/</targetPath>
        <filtering>false</filtering>
        <includes>
          <include>README.md</include>
        </includes>
      </resource>

      <!-- Docker Resources -->
      <!-- http://getprismatic.com/story/1416871126618?share=MzQxMTI.MTQxNjg3MTEyNjYxOA.LgQyeU8WnqGYihnaoiM-UNfuQD0 -->
      <resource>
        <directory>${basedir}/.docker/</directory>
        <targetPath>${project.build.directory}/.docker/</targetPath>
      </resource>

    </resources>

    <plugins>
      <!-- Package as an executable jar or war. This does most of the work for us. -->
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
      </plugin>

      <!-- Since we copy web files into classpath to make then available for spring and thymeleaf,
      these exclusions avoid duplications of webapp content when packaging a war. -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-war-plugin</artifactId>
        <configuration>
          <packagingExcludes>mails/,resources/,templates/</packagingExcludes>
        </configuration>
      </plugin>

      <!-- Compiler and Minifier for Coffeescript-->
      <plugin>
        <groupId>com.theoryinpractise</groupId>
        <artifactId>coffee-maven-plugin</artifactId>
        <version>1.4.13</version>
        <configuration>
          <coffeeOutputDirectory>${project.build.outputDirectory}/resources/js</coffeeOutputDirectory>
          <compileIndividualFiles>false</compileIndividualFiles>
          <coffeeJoinSets>
            <joinSet>
              <id>main</id> <!-- This is also the name of the resulting file -->
              <fileSet>
                <directory>${basedir}/src/main/webapp/resources/js</directory>
                <includes>
                  <include>**/*.coffee</include>
                </includes>
              </fileSet>
            </joinSet>
          </coffeeJoinSets>
          <minifiedFile>${project.build.outputDirectory}/resources/js/main.min.js</minifiedFile>
          <setOfFilesToMinify>
            <directory>${project.build.outputDirectory}/resources/js</directory>
            <includes>
              <include>**/*.js</include>
            </includes>
          </setOfFilesToMinify>
        </configuration>
        <executions>
          <execution>
            <phase>process-resources</phase>
            <goals>
              <goal>coffee</goal>
              <goal>minify</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!-- Compiler for SCSS  -->
      <plugin>
        <groupId>org.jasig.maven</groupId>
        <artifactId>sass-maven-plugin</artifactId>
        <version>1.1.1</version>
        <executions>
          <execution>
            <phase>process-resources</phase>
            <goals>
              <goal>update-stylesheets</goal>
            </goals>
            <configuration>
              <sassSourceDirectory>${basedir}/src/main/webapp/resources/css</sassSourceDirectory>
              <destination>${project.build.outputDirectory}/resources/css</destination>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- Minifier for CSS -->
      <plugin>
        <groupId>com.samaxes.maven</groupId>
        <artifactId>minify-maven-plugin</artifactId>
        <version>1.7.4</version>
        <executions>
          <execution>
            <phase>process-resources</phase>
            <goals>
              <goal>minify</goal>
            </goals>
            <configuration>
              <webappSourceDir>${project.build.outputDirectory}/resources</webappSourceDir>
              <webappTargetDir>${project.build.outputDirectory}/resources</webappTargetDir>
              <nosuffix>true</nosuffix>

              <!-- CSS Minify Options -->
              <cssSourceDir>css</cssSourceDir>
              <cssTargetDir>css</cssTargetDir>
              <cssFinalFile>main.min.css</cssFinalFile>
              <cssSourceIncludes>
                <include>*.css</include>
              </cssSourceIncludes>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- Compile time weaver for Configurable classes - http://mojo.codehaus.org/aspectj-maven-plugin/usage.html -->
      <!-- https://palesz.wordpress.com/2011/12/03/howto-maven-lombok-and-aspectj-together/ -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>aspectj-maven-plugin</artifactId>
        <version>1.7</version>
        <dependencies>
          <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjtools</artifactId>
            <version>${aspectj.version}</version> <!-- This version is set by Spring Boot -->
          </dependency>
        </dependencies>
        <executions>
          <execution>
            <phase>process-classes</phase>
            <goals>
              <goal>compile</goal>
            </goals>
            <configuration>
              <showWeaveInfo>true</showWeaveInfo>
              <forceAjcCompile>true</forceAjcCompile>
              <sources/>
              <weaveDirectories>
                <weaveDirectory>${project.build.outputDirectory}</weaveDirectory>
              </weaveDirectories>
              <aspectLibraries>
                <aspectLibrary>
                  <groupId>org.springframework</groupId>
                  <artifactId>spring-aspects</artifactId>
                </aspectLibrary>
              </aspectLibraries>
              <encoding>UTF-8</encoding>
              <source>${java.version}</source>
              <target>${java.version}</target>
              <complianceLevel>${java.version}</complianceLevel>
            </configuration>
          </execution>
        </executions>
      </plugin>

    </plugins>
  </build>


  <repositories>

    <!-- Add Local repositories -->
    <!-- EXAMPLE: https://devcenter.heroku.com/articles/local-maven-dependencies-->
    <!--    <repository>
      <id>project.local</id>
      <name>project</name>
      <url>file://${basedir}/repo</url>
    </repository>-->

    <!-- Add Spring repositories -->
    <!-- (you don't need this if you are using a .RELEASE version) -->
    <repository>
      <id>spring-snapshots</id>
      <url>http://repo.spring.io/snapshot</url>
      <snapshots>
        <enabled>true</enabled>
      </snapshots>
    </repository>
    <repository>
      <id>spring-milestones</id>
      <url>http://repo.spring.io/milestone</url>
    </repository>

  </repositories>

  <pluginRepositories>

    <pluginRepository>
      <id>spring-snapshots</id>
      <url>http://repo.spring.io/snapshot</url>
    </pluginRepository>
    <pluginRepository>
      <id>spring-milestones</id>
      <url>http://repo.spring.io/milestone</url>
    </pluginRepository>

  </pluginRepositories>

</project>
